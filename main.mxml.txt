<?xml version="1.0" encoding="utf-8"?>
<mx:Application
    xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:esri="http://www.esri.com/2008/ags"
    pageTitle="ESRI Education Community :: Sketch-A-Map"
    styleName="plain" layout="absolute"
>


    <mx:Script>
        <![CDATA[
            import mx.events.ItemClickEvent;
            import mx.controls.Alert;
            import com.esri.ags.Graphic;
            //imports for geometry
            import com.esri.ags.SpatialReference;
            import com.esri.ags.events.DrawEvent;
            import com.esri.ags.events.GeometryServiceEvent;
            // other AGO imports
            import com.esri.ags.geometry.MapPoint;
			// imports for printing
            import mx.printing.FlexPrintJobScaleType;
            import mx.printing.FlexPrintJob;
            //import for export to JPG
            import mx.graphics.codec.PNGEncoder;
			// flex viewer widget imports
			import com.esri.ags.events.DrawEvent;
			import com.esri.ags.events.GeometryServiceEvent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.geometry.Polyline;
			import com.esri.ags.Graphic;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.layers.Layer;
			import com.esri.ags.Map;
			import com.esri.ags.SpatialReference;
			import com.esri.ags.symbol.SimpleFillSymbol;
			import com.esri.ags.symbol.SimpleLineSymbol;
			import com.esri.ags.symbol.SimpleMarkerSymbol;
			import com.esri.ags.symbol.TextSymbol;
			import com.esri.ags.toolbars.Draw;
			import mx.collections.*;
			import mx.controls.Alert;
			import mx.rpc.AsyncResponder; 
			import mx.rpc.events.ResultEvent;
			
// VARIABLES -----------------------------------------------------
			public var mDist:String;
			//labels
			private var drawLabel:String;
			
			private var measurementsLabel:String;
			
			[Bindable]
			private var pointLabel:String;
			
			[Bindable]
			private var lineLabel:String;
			
			[Bindable]
			private var freehandlineLabel:String;
			
			[Bindable]
			private var polygonLabel:String;
			
			[Bindable]
			private var freehandpolygonLabel:String;
			
			[Bindable]
			private var drawtextLabel:String;
			
			[Bindable]
			private var clearLabel:String;
			
			[Bindable]
			private var textLabel:String;
			
			[Bindable]
			private var colorLabel:String;
			
			[Bindable]
			private var sizeLabel:String;
			
			[Bindable]
			private var showmeasurementsLabel:String;
			
			[Bindable]
			private var distanceUnitsLabel:String;
			
			[Bindable]
			private var areaUnitsLabel:String;
			
			private var areaLabel:String;
			
			private var perimeterLabel:String;
			
			private var lengthLabel:String;
			
			//private var spatialref:Number = 32618;
			private var spatialref:Number = 102003;
						
			[Bindable]
			private var configDistance:Array;
			
			[Bindable]
			private var configArea:Array;
			
			private var drawMode:String;
			
			private var measurePt:MapPoint;
			
			private var graphicsLayer:GraphicsLayer;
						
			private const ICON_URL:String = "com/esri/solutions/flexviewer/assets/images/icons/";
			
			private const TEXT_MODE:String = "text";
			
//BASE MAP AND MAP LAYERS -------------------------------------------
         private function maptoolReset():void
         	{
         		sMap.centerAt(new MapPoint( 0, 0 ));
         		sMap.scale=146000000;
         		bb.selectedIndex = 1; 
         		sMap.zoomSliderVisible=true;
         		sMap.scaleBarVisible=true;  
         		cb_sb.selected=true;
         		cb_z.selected=true;
         		trans.visible=false;
         		placenames.visible=false;
         		cb_trans.selected=false;
         		cb_placenames.selected=false;
         		myGraphicsLayer.clear();
         	}
 
         private function maptoolScalebar():void
         	{
         		if (cb_sb.selected)
         			{
         			sMap.scaleBarVisible=true;   
         			}
         		else
         			{
         			sMap.scaleBarVisible=false;
         			}
         	}  
         private function maptoolzoom():void
         	{
         		if (cb_z.selected)
         			{
         			sMap.zoomSliderVisible=true;   
         			}
         		else
         			{
         			sMap.zoomSliderVisible=false;
         			}
         	} 
          private function maptoolplacenames():void
         	{
         		if (cb_placenames.selected)
         			{
         			placenames.visible=true;   
         			}
         		else
         			{
         			placenames.visible=false;
         			}
         	}  
           private function maptooltrans():void
         	{
         		if (cb_trans.selected)
         			{
         			trans.visible=true;   
         			}
         		else
         			{
         			trans.visible=false;
         			}
         	}       	        
 
            
// MAP EXPORT FUNCTIONALITY ------------------------------------------
       		private function doPrint(myFlexPrintJobScaleType:String):void
            {
                // Create an instance of the FlexPrintJob class.
                var myPrintJob:FlexPrintJob = new FlexPrintJob();

                // Start the print job.
                if (myPrintJob.start())
                {
                    try
                    {
                        // hide the zoom slider so it won't be printed
                        sMap.zoomSliderVisible = false;

                        // Add the panel to print.
                        myPrintJob.addObject(mapCanvas, myFlexPrintJobScaleType);

                        // turn the zoom slider back on
                        sMap.zoomSliderVisible = true;
                    }
                    catch (error:Error)
                    {
                        Alert.show(error.toString());
                    }
                    // Send the job to the printer.
                    myPrintJob.send();
                }
            } 
 
            
 // draw and label functions 
 			
			private function init():void
			{
				graphicsLayer = new GraphicsLayer();
				sMap.addLayer(graphicsLayer);
				if (configXML)
				{
					//labels
					drawLabel = configXML.labels.drawlabel || "Draw";
					measurementsLabel = configXML.labels.measurementslabel || "Measurements";
					pointLabel = configXML.labels.pointlabel || "Draw Point";
					lineLabel = configXML.labels.linelabel || "Draw Line";
					freehandlineLabel = configXML.labels.freehandlinelabel || "Draw Freehand Line";
					polygonLabel = configXML.labels.polygonlabel || "Draw Polygon";
					freehandpolygonLabel = configXML.labels.freehandpolygonlabel || "Draw Freehand Polygon";
					drawtextLabel = configXML.labels.drawtextlabel || "Draw Text";
					clearLabel = configXML.labels.clearlabel || "Clear Drawing";
					textLabel = configXML.labels.textlabel || "Text:";
					colorLabel = configXML.labels.colorlabel || "Color:";
					sizeLabel = configXML.labels.sizelabel || "Size:";
					showmeasurementsLabel = configXML.labels.showmeasurementslabel || "Show Measurements:";	
					distanceUnitsLabel = configXML.labels.distanceunitslabel || "Distance Units:";	
					areaUnitsLabel = configXML.labels.areaunitslabel || "Area Units:";
					areaLabel = configXML.labels.arealabel || "Area:";
					perimeterLabel = configXML.labels.perimeterlabel || "Perimeter:";
					lengthLabel = configXML.labels.lengthlabel || "Length:";
					if (Number(configXML.spatialref) > 0)
						spatialref = Number(configXML.spatialref);
					
					geometryService.url  = configXML.geometryservice;
					var distanceList:XMLList = configXML..distanceunit;
					var areaList:XMLList = configXML..areaunit;
					var i:Number;
					configDistance = new Array()
					for (i = 0; i < distanceList.length(); i++)
					{
						var dLabel:String = distanceList[i];
						var dAbbr:String = distanceList[i].@abbr;
						var dConversion:Number = Number(distanceList[i].@conversion);
						var dUnit:Object = 
						{
							label: dLabel,
							abbr: dAbbr,
							conversion: dConversion
						}
						configDistance.push(dUnit);
					}
					cboDistance.dataProvider = configDistance;
					configArea = [];
					for (i = 0; i < areaList.length(); i++)
					{
						var aLabel:String = areaList[i];
						var aAbbr:String = areaList[i].@abbr;
						var aConversion:Number = Number(areaList[i].@conversion);
						var aUnit:Object = 
						{
							label: aLabel,
							abbr: aAbbr,
							conversion: aConversion
						}
						configArea.push(aUnit);
					}
					cboArea.dataProvider = configArea;	
				}
				//wTemplate.addTitlebarButton(ICON_URL + "i_measure.png", measurementsLabel, showStateMeasurements);
				//wTemplate.addTitlebarButton(ICON_URL + "i_draw.png", drawLabel, showStateDraw);	
			}			
			
			private function activateDrawTool(value:String, mode:String):void
			{
				drawMode = mode;
				var status:String;
				switch (value)
				{
					case Draw.MAPPOINT:
					{
						status = pointLabel;
						if (mode == TEXT_MODE)
							status = drawtextLabel;
						break;
					}
					
					case Draw.POLYLINE:
					{
						status = lineLabel;
						break;
					}
					
					case Draw.FREEHAND_POLYLINE:
					{
						status = freehandlineLabel;
						break;
					}
					
					case Draw.POLYGON:
					{
						status = polygonLabel;
						break;
					}
					
					case Draw.FREEHAND_POLYGON:
					{
						status = freehandpolygonLabel;
						break;
					}
				}
				setMapAction(value, status, drawEnd);;		
			}			
			
			private function drawEnd(event:DrawEvent):void
			{
				var outSR:SpatialReference = new SpatialReference(spatialref);
				var geom:Geometry = event.graphic.geometry;
				var gra:Graphic = new Graphic(geom);
				switch (geom.type)  
                {         
                	case Geometry.MAPPOINT:
                	{
                		if (drawMode == TEXT_MODE)
                		{
                			var txtSym:TextSymbol = new TextSymbol(txtLabel.text);
                			var txtFormat:TextFormat = new TextFormat("Arial", numGraphic.value, cpGraphic.selectedColor);
                			txtSym.textFormat = txtFormat;
	                		gra.symbol = txtSym;
                		}
                		else
                		{
	                		var ptSym:SimpleMarkerSymbol = new SimpleMarkerSymbol("circle", numGraphic.value, cpGraphic.selectedColor);
	                		gra.symbol = ptSym;
	                		if (chkMeasurements.selected)
	                		{
		                		measurePt = geom as MapPoint;
		                		addDrawLabel(numFormatter.format(measurePt.x) + ", " + numFormatter.format(measurePt.y));
	                		}
                		}
                		break;
                	}
                		
                	case Geometry.POLYLINE:
                	{
                		var lineSym:SimpleLineSymbol = new SimpleLineSymbol("solid",cpGraphic.selectedColor, 1, numGraphic.value);
                		gra.symbol = lineSym;
                		if (chkMeasurements.selected)
	                	{
	                		geometryService.project([gra],outSR);
	                		var line:Polyline = geom as Polyline;
							measurePt = line.extent.center;
	                	}
                		break;
                	}
                		              
                	case Geometry.POLYGON:
                	{
                		var outlineSym:SimpleLineSymbol = new SimpleLineSymbol("solid",cpGraphic.selectedColor, 1, 2);
                		var polySym:SimpleFillSymbol = new SimpleFillSymbol("solid", cpGraphic.selectedColor, 0.15, outlineSym);
                		gra.symbol = polySym;
                		if (chkMeasurements.selected)
	                	{
	                		geometryService.project([gra],outSR);
	                		var poly:Polygon = geom as Polygon;
							measurePt = poly.extent.center;
	                	}
                		break;
                	}
                }
                graphicsLayer.add(gra);
			}			
			
			private function projectCompleteHandler(event:GeometryServiceEvent):void
			{
				var geom:Geometry = event.graphics[0].geometry; 
				var newGraphic:Graphic = new Graphic(geom);                
				geometryService.areasAndLengths([newGraphic]);
				switch (geom.type)
				{
					case Geometry.POLYLINE:
					{
						geometryService.lengths([newGraphic]);
						break;
					}
					
					case Geometry.POLYGON:
					{
						geometryService.areasAndLengths([newGraphic]);
						break;
					}
				}
			}			
			
			private function arealengthsCompleteHandler(event:GeometryServiceEvent):void
            {   
                var area:Number = event.arealengths.areas[0];
                var length:Number = event.arealengths.lengths[0];
                var abbrArea:String = cboArea.selectedItem.abbr;
                var convArea:Number = cboArea.selectedItem.conversion;
                var abbrDist:String = cboDistance.selectedItem.abbr;
                var convDist:Number = cboDistance.selectedItem.conversion;
                var label:String = areaLabel + " " + numFormatter.format(area * convArea) + " " + abbrArea;
                label += "\n" + perimeterLabel + " " +  numFormatter.format(length * convDist) + " " + abbrDist;
                addDrawLabel(label);
            }            
            
            private function lengthsCompleteHandler(event:GeometryServiceEvent):void
            {   
                var length:Number = event.lengths[0];
                var abbrDist:String = cboDistance.selectedItem.abbr;
                var convDist:Number = cboDistance.selectedItem.conversion;
                var label:String = lengthLabel + " " +  numFormatter.format(length * convDist) + " " + abbrDist;
                addDrawLabel(label);
            }            
            
            private function addDrawLabel(label:String):void
            {
            	var txtSym:TextSymbol = new TextSymbol(label);
            	txtSym.yoffset = 8;
            	var txtFormat:TextFormat = new TextFormat("Arial", 12, cpGraphic.selectedColor,true );
                txtSym.textFormat = txtFormat;
                var gra:Graphic = new Graphic(measurePt);
	            gra.symbol = txtSym;
	            graphicsLayer.add(gra);
            }						
			
			private function clear():void
			{
				graphicsLayer.clear();
			}
						
			private function widgetClosedHandler(event:Event):void
			{
				graphicsLayer.visible = false;
				setMapNavigation(null, null);
			}
						
			private function widgetOpenedHandler(event:Event):void
			{	
				graphicsLayer.visible = true;
			}
						
			private function showStateDraw(event:MouseEvent):void
			{
				WidgetEffects.flipWidget(this, viewStack, "selectedIndex", 0, 400);
			}
										
			private function showStateMeasurements(event:MouseEvent):void
			{
				WidgetEffects.flipWidget(this, viewStack, "selectedIndex", 1, 400);
			}        
 
      ]]>
    </mx:Script>


    
    
	<mx:Canvas id="mapCanvas" width="100%" height="100%" 
		horizontalScrollPolicy="off" verticalScrollPolicy="off">
    <esri:Map id="sMap">
        <esri:extent>
            <esri:Extent xmin="-110.0571" ymin="-40.2697" xmax="30.4321" ymax="44.0822">
                <esri:SpatialReference wkid="4326"/>
            </esri:Extent>
        </esri:extent>

       <esri:ArcGISTiledMapServiceLayer
            fadeInFrameCount="0" visible="{bb.selectedIndex == 2}" 
            url="http://server.arcgisonline.com/ArcGIS/rest/services/ESRI_Imagery_World_2D/MapServer" />               
        <esri:ArcGISTiledMapServiceLayer
            visible="{bb.selectedIndex == 0}" 
            url="http://server.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer" />
        <esri:ArcGISTiledMapServiceLayer
            visible="{bb.selectedIndex == 1}" 
            url="http://server.arcgisonline.com/ArcGIS/rest/services/NGS_Topo_US_2D/MapServer" />
		<esri:ArcGISTiledMapServiceLayer id="placenames" visible="false"
			url="http://server.arcgisonline.com/ArcGIS/rest/services/Reference/ESRI_BoundariesPlacesAlt_World_2D/MapServer" />
 		<esri:ArcGISTiledMapServiceLayer id="trans" visible="false" alpha=".8" 
			url="http://server.arcgisonline.com/ArcGIS/rest/services/Reference/ESRI_Transportation_World_2D/MapServer" />
 				
 
        <esri:GraphicsLayer id="myGraphicsLayer"/>
    </esri:Map>
 </mx:Canvas>
    


<!-- BASE MAP WIDGET ====================================== -->
<mx:Panel id="baseMapPanel" title="Base Maps and Overlays" 
	y="65" x="50"
	width="225" height="300" 
	layout="absolute" visible="false">
	
			<mx:Text text="Base Map" x="15" y="130" />
	 		<mx:ComboBox x="25" y="150" 
	 			width="139" id="bb" fontSize="10" 
 				editable="false" enabled="true" 
 				selectedIndex="1" height="16">
		      <mx:ArrayCollection >
		         <mx:Object label="Political map" data="Political"/>
		         <mx:Object label="Topo map" data="Topo"/>
		         <mx:Object label="Imagery " data="Imagery"/>
		      </mx:ArrayCollection>
      		</mx:ComboBox>
     	
      	<mx:Button x="10" y="200" label="Reset Map" click="maptoolReset();"/>	
		<mx:Text text="Map features and overlays" x="15" y="20" />
		<mx:CheckBox x="25" y="40" click="maptoolScalebar();" label="Scale bar" id="cb_sb" selected="true" enabled="true"/>
		<mx:CheckBox x="25" y="60" click="maptoolzoom();" label="Zoom bar" id="cb_z" selected="true" enabled="true"/>
		<mx:CheckBox x="25" y="80" click="maptoolplacenames();" label="Places" id="cb_placenames" selected="false" enabled="true"/>
		<mx:CheckBox x="25" y="100" click="maptooltrans();" label="Transportation" id="cb_trans" selected="false" enabled="true"/>
	
		<mx:Button label="Close" x="110" y="200" click="baseMapPanel.visible=false"/>		
</mx:Panel>

<!-- BASE MAP WIDGET ====================================== -->
<mx:Panel id="savePanel" title="Save or Print Map" 
	y="65" x="50"
	width="225" height="300" 
	layout="absolute" visible="false">

	<mx:TextArea width="180" height="82" text="Print your map to a selected printer or save the map
	to an image (JPG) for the Web, wordprocessor, or presentation." x="15" y="15"  wordWrap="true" editable="false" enabled="true" borderStyle="none"/>

		<mx:Button label="Print My Map" x="50" y="105" 
			click="doPrint(FlexPrintJobScaleType.SHOW_ALL)"/>

<mx:Button label="Save to an image (JPG) file" 
	toolTip="Great for inserting into documents and email." 
	id="btn2" x="15" y="140">
	        <mx:click>
        var bd:BitmapData = new BitmapData(sMap.width,sMap.height);
        bd.draw(sMap);
  
        var ba:ByteArray = (new PNGEncoder()).encode(bd);
        
        (new FileReference()).save(ba, "myMap.png");
        </mx:click>
</mx:Button>
	
		<mx:Button label="Close" x="140" y="225" click="savePanel.visible=false"/>		
</mx:Panel>


</mx:Application>